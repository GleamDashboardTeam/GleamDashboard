class = "custom-box",
h3("Compare Regions", style = "font-size: 26px; margin-top: 0px;"),
actionButton("switch_tab_comparison_new",
label = icon("chart-simple", class = "fa-7x"),
class = "custom-action-button"
),
#HTML("<h4 style='margin-top: 10px; font-size: 18px;'>Select several regions and compare them</h4>"),
HTML("<p style='font-size: 14px; margin-top: 20px;'>A tool to compare animal populations, animal products,
emissions and emission intensities between multiple regions. </p>")
)
),
column(
width = 3,
div(
class = "custom-box",
h3("Input Data", style = "font-size: 26px; margin-top: 0px;"),
actionButton("switch_tab_inputdata_new",
label = icon("database", class = "fa-7x"),
class = "custom-action-button"
),
#HTML("<h4 style='margin-top: 10px; font-size: 18px;'>Browse the input data of GLEAM</h4>"),
HTML("<p style='font-size: 14px; margin-top: 20px;'>Selected input data for the model, by species,
herd and production systems. Data is downloadable at a chosen geographic level. </p>")
)
),
column(
width = 3,
div(
class = "custom-box",
h3("Regions", style = "font-size: 26px; margin-top: 0px;"),
actionButton("switch_tab_regions_new",
label = icon("globe-americas", class = "fa-7x"),
class = "custom-action-button"
),
#HTML("<h4 style='margin-top: 10px; font-size: 18px;'>Maps of the different world regions</h4>"),
HTML("<p style='font-size: 14px; margin-top: 20px;'>Regions for which the GLEAM data can be aggregated,
based on geographic, economic or administrative criteria. </p>")
)
)
)
),
box(
width = NULL, status = "primary", solidHeader = FALSE,
title = tags$h3("Supplementary information", style = "font-size: 28px;  margin-top: 0px; margin-left: 20px;"),
tags$br(),
fluidRow(style = "margin-left: 10px; margin-right: 10px;",
column(
width = 3,
div(
class = "custom-box",
h3("About GLEAM", style = "font-size: 26px; margin-top: 0px;"),
actionButton("switch_tab_aboutgleam_new",
label = icon("circle-info", class = "fa-7x"),
class = "custom-action-button"
),
#HTML("<h4 style='margin-top: 10px; font-size: 18px;'>Learn more about GLEAM</h4>"),
HTML("<p style='font-size: 14px; margin-top: 20px;'>Background information about GLEAM, the underlying data,
methods and parameters, and the differences in methodology between versions of the model. </p>")
)
),
column(
width = 3,
div(
class = "custom-box",
h3("Change Log", style = "font-size: 26px; margin-top: 0px;"),
actionButton("switch_tab_changes_new",
label = icon("cash-register", class = "fa-7x"),
class = "custom-action-button"
),
#HTML("<h4 style='margin-top: 10px; font-size: 18px;'>Review all current changes</h4>"),
HTML("<p style='font-size: 14px; margin-top: 20px;'>Reference list describing all recent changes made to the dashboard.</p>")
)
),
column(
width = 3,
div(
class = "custom-box",
h3("Pathways Report", style = "font-size: 26px; margin-top: 0px;"),
tags$a(href = "https://doi.org/10.4060/cc9029en", target = "_blank",
img(src = paste0(gitHubImageDir, "PathwaysCoverSmaller.png"),
width = 425*0.33, height = 602*0.33,
style = "border: 1px solid black; margin-left: 0px; margin-right: 0px; font-size: 10px"),
),
# HTML("<p style='font-size: 14px; margin-top: 20px;'>Pathways Towards Lower Emissions - A global assessment of the
#      greenhouse gas emissions and mitigation options from livestock agrifood systems. </p>")
)
),
column(
width = 3,
div(
class = "custom-box",
br(),
br(),
br(),
#h3("Pathways Report", style = "font-size: 26px; margin-top: 0px;"),
HTML("<p style='font-size: 14px; margin-top: 20px; margin-left: 0px; text-align: left;font-style: italic;'>Pathways Towards Lower Emissions - A global assessment of the
greenhouse gas emissions and mitigation options from livestock agrifood systems. </p>")
)
)
)
)
),
#########################################################################################################################################
########################################################### COMPARISON TOOL #############################################################
#########################################################################################################################################
tabItem(
tabName = "tab_comparison",
tags$h3("Compare regions against each other", style = "font-size: 32px;  margin-top: 10px; margin-left: 10px;"),
tags$br(),
box(
collapsible = T,
title = "Select regions", id = "compbox1", status = "primary", solidHeader = TRUE, width = NULL,
tags$br(),
column(
width =6,
# if (isPublicVersion == T){
#   selectizeInput("selectCountry_comp",  label = NULL,
#                  choices = list(
#                    World = worldRegions, Continents = contRegions, 'FAO Regions' =  faoRegions, 'GLEAM Regions' = gleamRegions,
#                    'SDGs Regions'  = sdgRegions, 'World Bank Regions' = wbRegions, 'EU27 Countries'  = eu27Regions,
#                    'LDC Countries' = ldcRegions, 'LLDC Countries' = lldcRegions, 'OECD Countries' = oecdRegions, 'SIDS Countries' = sidsRegions
#                  ),
#
#
#                  selected = c("WORLD1", "CONTINE4"), multiple = TRUE,
#                  options = list( maxItems = 4, 'plugins' = list('remove_button'), 'create' = TRUE, 'persist' = FALSE)
#   )
# } else {
#   selectizeInput("selectCountry_comp",  label = NULL,
#                  choices = list(
#                    World = worldRegions, Continents = contRegions, 'FAO Regions' =  faoRegions, 'GLEAM Regions' = gleamRegions,
#                    'SDGs Regions'  = sdgRegions, 'World Bank Regions' = wbRegions, 'EU27 Countries'  = eu27Regions,
#                    'LDC Countries' = ldcRegions, 'LLDC Countries' = lldcRegions, 'OECD Countries' = oecdRegions, 'SIDS Countries' = sidsRegions,
#                    'Countries' = countries
#                  ),
#
#
#                  selected = c("WORLD1", "CONTINE4"), multiple = TRUE,
#                  options = list( maxItems = 4, 'plugins' = list('remove_button'), 'create' = TRUE, 'persist' = FALSE)
#   )
# },
selectizeInput("selectCountry_comp",  label = NULL,
if (isPublicVersion == T){
choices = list(
World = worldRegions, Continents = contRegions, 'FAO Regions' =  faoRegions, 'GLEAM Regions' = gleamRegions,
'SDGs Regions'  = sdgRegions, 'World Bank Regions' = wbRegions, 'EU27 Countries'  = eu27Regions,
'LDC Countries' = ldcRegions, 'LLDC Countries' = lldcRegions, 'OECD Countries' = oecdRegions, 'SIDS Countries' = sidsRegions
)}else {
choices = list(
World = worldRegions, Continents = contRegions, 'FAO Regions' =  faoRegions, 'GLEAM Regions' = gleamRegions,
'SDGs Regions'  = sdgRegions, 'World Bank Regions' = wbRegions, 'EU27 Countries'  = eu27Regions,
'LDC Countries' = ldcRegions, 'LLDC Countries' = lldcRegions, 'OECD Countries' = oecdRegions, 'SIDS Countries' = sidsRegions,
'Countries' = countries
)},
selected = c("WORLD1", "CONTINE4"), multiple = TRUE,
options = list( maxItems = 4, 'plugins' = list('remove_button'), 'create' = TRUE, 'persist' = FALSE),
),
selectizeInput("selectCountry_comp",  label = NULL,
choices = list(
World = worldRegions, Continents = contRegions, 'FAO Regions' =  faoRegions, 'GLEAM Regions' = gleamRegions,
'SDGs Regions'  = sdgRegions, 'World Bank Regions' = wbRegions, 'EU27 Countries'  = eu27Regions,
'LDC Countries' = ldcRegions, 'LLDC Countries' = lldcRegions, 'OECD Countries' = oecdRegions, 'SIDS Countries' = sidsRegions
, 'Countries' = countries
),
selected = c("WORLD1", "CONTINE4"), multiple = TRUE,
options = list( maxItems = 4, 'plugins' = list('remove_button'), 'create' = TRUE, 'persist' = FALSE)
)
)
),
box(
tags$br(),
collapsible = T,
title = "Select species, herd type and production system", id = "compbox2", status = "primary", solidHeader = TRUE, width = NULL,
div(
style = "margin-left: 20px;",
checkboxGroupInput("selectAnimals_comp", label = "Species",
choices = sort(c(Ruminants, Monogastrics)), inline = T,
selected = c(Monogastrics, Ruminants)
)
),
div(
style = "margin-left: 40px;",
conditionalPanel("(input.selectAnimals_comp.length >= 1) &&
((input.selectAnimals_comp.includes('Cattle')) ||
(input.selectAnimals_comp.includes('Goats')) ||
(input.selectAnimals_comp.includes('Sheep')) ||
(input.selectAnimals_comp.includes('Buffalo'))) ",
#uiOutput("HerdType_comp"))
checkboxGroupInput("selectHerd_comp", "Herd type of ruminants", choices = c("Beef", "Dairy"), selected = c("Beef", "Dairy"), inline = T)
)
),
div(
style = "margin-left: 40px;",
conditionalPanel("(input.selectAnimals_comp.length >= 1) &&
((input.selectAnimals_comp.includes('Cattle')) ||
(input.selectAnimals_comp.includes('Goats')) ||
(input.selectAnimals_comp.includes('Sheep')) ||
(input.selectAnimals_comp.includes('Buffalo'))) ",
#uiOutput("LPS_comp"))
checkboxGroupInput("selectLPS_comp1", "Production system of ruminants", choices =  c("Feedlots", "Grassland", "Mixed"),
selected = c("Feedlots", "Grassland", "Mixed"), inline = T)
),
conditionalPanel("(input.selectAnimals_comp.length >= 1) &&
(input.selectAnimals_comp.includes('Chickens'))",
checkboxGroupInput("selectLPS_comp2", "Production system of chickens",
#choices =  c("Backyard", "Broiler", "Layer"),
choices = c("Backyard" = "Backyard_chickens", "Broiler" = "Broiler", "Layer" = "Layer"),
selected = c("Backyard_chickens", "Broiler", "Layer"), inline = T)
),
conditionalPanel("(input.selectAnimals_comp.length >= 1) &&
(input.selectAnimals_comp.includes('Pigs'))",
checkboxGroupInput("selectLPS_comp3", "Production system of pigs",
# choices =  c("Backyard", "Industrial", "Intermediate"),
choices = c("Backyard" = "Backyard_pigs", "Industrial" = "Industrial", "Intermediate" = "Intermediate"),
selected = c("Backyard_pigs", "Industrial", "Intermediate"), inline = T)
)
)
),
box(
title = "Results", id = "compbox3", status = "primary", solidHeader = TRUE, width = NULL,
tags$br(),
tabBox(
width = 12,
title = NULL,
id = "tabset1",
tabPanel("Animal Population",
plotlyOutput("AnimalPopulations_Bars_comp")
),
tabPanel("Animal Products",
tags$br(),
checkboxGroupInput("prod_products_comp", label = "Product",
choices = c("Meat", "Milk", "Eggs"), inline = T,
selected = c("Meat", "Milk", "Eggs")),
radioButtons("prod_unit_comp", "Unit", choices = c("Product weight", "Protein weight"),
inline = T, selected = c("Product weight")),
radioButtons("prod_node_comp", "Group results by", choices = c("Species", "Herd type", "Production system", "Product"),
inline = T, selected = c("Species")),
plotlyOutput("AnimalProducts_Bars_comp")
),
tabPanel("Emissions",
tags$br(),
checkboxGroupInput("em_products_comp", label = "Product",
choices = c("Meat", "Milk", "Eggs"), inline = T,
selected = c("Meat", "Milk", "Eggs")),
checkboxGroupInput("em_ghg_comp", label = "Greenhouse Gas",
choices = c("Carbon dioxide (CO2)", "Methane (CH4)", "Nitrous oxide (N2O)"), inline = T,
selected = c("Carbon dioxide (CO2)", "Methane (CH4)", "Nitrous oxide (N2O)")),
div(
style = "margin-left: 20px;",
conditionalPanel("(input.em_ghg_comp.includes('Carbon dioxide (CO2)'))",
checkboxGroupInput("em_sources_CO2_comp", label = "Emission source for Carbon dioxide (CO2)",
choices  = c("Feed", "LUC: soy and palm", "Direct on-farm energy", "LUC: pasture expansion", "Embedded on-farm energy", "Post-farm"), inline = T,
selected = c("Feed", "LUC: soy and palm", "Direct on-farm energy", "LUC: pasture expansion", "Embedded on-farm energy", "Post-farm"))
),
conditionalPanel("(input.em_ghg_comp.includes('Methane (CH4)'))",
checkboxGroupInput("em_sources_CH4_comp", label = "Emission source for Methane (CH4)",
choices  = c("Feed", "Manure", "Enteric fermentation"), inline = T,
selected = c("Feed", "Manure", "Enteric fermentation"))
),
conditionalPanel("(input.em_ghg_comp.includes('Nitrous oxide (N2O)'))",
checkboxGroupInput("em_sources_N2O_comp", label = "Emission source for Nitrous oxide (N2O)",
choices  = c("Feed", "Manure"), inline = T,
selected = c("Feed", "Manure"))
)
),
radioButtons("em_node_comp", "Group results by", choices = c("Species", "Herd type", "Production system", "Product", "Greenhouse gas", "Emission source"),
inline = T, selected = c("Species")),
plotlyOutput("Emissions_Bars_comp")
),
tabPanel("Emission Intensities",
tags$br(),
checkboxGroupInput("emint_products_comp", label = "Product",
choices = c("Meat", "Milk", "Eggs"), inline = T,
selected = c("Meat", "Milk", "Eggs")),
checkboxGroupInput("emint_ghg_comp", label = "Greenhouse Gas",
choices = c("Carbon dioxide (CO2)", "Methane (CH4)", "Nitrous oxide (N2O)"), inline = T,
selected = c("Carbon dioxide (CO2)", "Methane (CH4)", "Nitrous oxide (N2O)")),
div(
style = "margin-left: 20px;",
conditionalPanel("(input.emint_ghg_comp.includes('Carbon dioxide (CO2)'))",
checkboxGroupInput("emint_sources_CO2_comp", label = "Emission source for Carbon dioxide (CO2)",
choices  = c("Feed", "LUC: soy and palm", "Direct on-farm energy", "LUC: pasture expansion", "Embedded on-farm energy", "Post-farm"), inline = T,
selected = c("Feed", "LUC: soy and palm", "Direct on-farm energy", "LUC: pasture expansion", "Embedded on-farm energy", "Post-farm")
)
),
conditionalPanel("(input.emint_ghg_comp.includes('Methane (CH4)'))",
checkboxGroupInput("emint_sources_CH4_comp", label = "Emission source for Methane (CH4)",
choices  = c("Feed", "Manure", "Enteric fermentation"), inline = T,
selected = c("Feed", "Manure", "Enteric fermentation")
)
),
conditionalPanel("(input.emint_ghg_comp.includes('Nitrous oxide (N2O)'))",
checkboxGroupInput("emint_sources_N2O_comp", label = "Emission source for Nitrous oxide (N2O)",
choices  = c("Feed", "Manure"), inline = T,
selected = c("Feed", "Manure")
)
)
),
radioButtons("emint_unit_comp", "Unit", choices = c("Emissions per animal", "Emissions per kg of product", "Emissions per kg of protein"),
inline = T, selected = c("Emissions per animal")),
radioButtons("emint_node_comp", "Group results by", choices = c("Species", "Herd type", "Production system", "Product", "Greenhouse gas", "Emission source"),
inline = T, selected = c("Species")),
plotlyOutput("EmissionIntensities_Bars_comp")
),
)
)
),
########################################################################################################################################################################\
########################################################### POPULATION ###############################################################################################
if (isPublicVersion == T) {
tabItem(
tabName = "tab_population", h1("Animal Population"),
h3(htmlOutput("productionsystem_caption")),
valueBoxOutput("infoHerdSizeBUF", width =2),
valueBoxOutput("infoHerdSizeCTL", width =2),
valueBoxOutput("infoHerdSizeSHP", width =2),
valueBoxOutput("infoHerdSizeGTS", width = 2),
valueBoxOutput("infoHerdSizePGS", width = 2),
valueBoxOutput("infoHerdSizeCHK", width = 2),
checkboxGroupInput("pop_SelectAnimals", "Species",
choices = sort ( c(Ruminants, Monogastrics)), inline = T, selected =c(Monogastrics, Ruminants)),
checkboxGroupInput("pop_SelectHerdType", "Herds",
choices = c("Beef", "Dairy"), inline = T, selected = c("Beef", "Dairy")),
plotlyOutput("animalNumberAll"),
fluidRow(column(12, div(style="display: inline-block;",tags$h3(("Animal Population Map"))),
actionButton("help_population_map", label = icon("info-circle"),
style = "padding:10px; color: #000000; background-color: #ffffff00; border-color: #ffffff00"))),
htmlOutput(  "HiHFramePopulation") %>% withSpinner(color="#0A97D9"),)
}else{
tabItem(
tabName = "tab_population", h1("Animal Population"),
h3(htmlOutput("productionsystem_caption")),
valueBoxOutput("infoHerdSizeBUF", width = 2),
valueBoxOutput("infoHerdSizeCTL", width = 2),
valueBoxOutput("infoHerdSizeSHP", width = 2),
valueBoxOutput("infoHerdSizeGTS", width = 2),
valueBoxOutput("infoHerdSizePGS", width = 2),
valueBoxOutput("infoHerdSizeCHK", width = 2),
valueBoxOutput("infoHerdSizeCML", width = 2),
checkboxGroupInput("pop_SelectAnimals", "Species",
choices = sort ( c(Ruminants, Monogastrics)), inline = T, selected =c(Monogastrics, Ruminants)),
checkboxGroupInput("pop_SelectHerdType", "Herds",
choices = c("Beef", "Dairy"), inline = T, selected = c("Beef", "Dairy")),
plotlyOutput("animalNumberAll"),
fluidRow(column(12, div(style="display: inline-block;",tags$h3(("Animal Population Map"))),
actionButton("help_population_map", label = icon("info-circle"),
style = "padding:10px; color: #000000; background-color: #ffffff00; border-color: #ffffff00"))),
htmlOutput(  "HiHFramePopulation") %>% withSpinner(color="#0A97D9"),)
},
#######################################################################################################################################################################
################################################ EMISSION INTENSITY ###################################################################################################
tabItem(
tabName = "tab_emissionIntensity",
h1("Emission Intensities"),
h3(htmlOutput("emissionintensity_caption")),
valueBoxOutput("infoIntensityMeat", width = 3),
valueBoxOutput("infoIntensityMilk",width = 3),
valueBoxOutput("infoIntensityEggs", width =3 ),
valueBoxOutput ("infoIntensityAll", width = 3),
fluidRow(column(12, div(style="display: inline-block;",tags$h3(("Emissions intensities of animal products"))),
actionButton("help_emissionintensity", label = icon("info-circle"),
style = "padding:10px; color: #000000; background-color: #ffffff00; border-color: #ffffff00"))),
checkboxGroupInput("int_selAnimals", "Species",
choices = sort ( c(Monogastrics, Ruminants)), inline = T, selected =c(Monogastrics, Ruminants)),
uiOutput ("EmIntensityHerdType"),
uiOutput("EmIntensityLPS"),
radioButtons("emIntensityCommodityOrAnimal", "Reference", choiceName = c("Animal", "Commodity"), choiceValues =   c("Animal", "Commodities" ), inline = T,selected = "Commodities"),
fluidRow(
column(12,
div(style = "display: inline-block;",
uiOutput("EmIntensityCommodity")
),
div(style = "display: inline-block; margin-left: 20px; margin-right: 20px; vertical-align: -3px;",
uiOutput ("EmIntensityCommodityAsProtein")
)
)
),
uiOutput ("EmIntensity_emSource"),
checkboxGroupInput("EMIntensity_Nodes","Nodes", choiceValues =   c("Animal", "HerdType", "LPS" ),
choiceNames = c("Species", "Herd", "Production system" ), selected = "Animal", inline = T ),
checkboxInput("emIntensityBySource", "By sources", value= F ),
tabBox(
title = "Emission intensities",
# The id lets us use input$tabset1 on the server to find the current tab
side = "right",
selected = "Bar chart",
id = "tabset1", width= "100%",
tabPanel("Bar chart",
plotlyOutput ("emIntensityBar")%>% withSpinner(color="#0A97D9"),
),
tabPanel("Data",
DT::dataTableOutput('DatatableIntensityAll_2') %>% withSpinner(color="#0A97D9")
),
),
fluidRow(column(12, div(style="display: inline-block;",tags$h3(("Emission Intensity Map"))),
actionButton("help_emissionIntensity_map", label = icon("info-circle"),
style = "padding:10px; color: #000000; background-color: #ffffff00; border-color: #ffffff00"))),
htmlOutput(  "HiHFrameEmissionIntensity") %>% withSpinner(color="#0A97D9"),
),
#################################################################################################################################################################
############################################################# PRODUCTION #########################################################################################
tabItem(
tabName = "tab_production",
h1("Animal Products"),
h3(htmlOutput("production_caption")),
valueBoxOutput("infoProdMeatTotal", width = 3),
valueBoxOutput("infoProdMilkTotal", width=3),
valueBoxOutput("infoProdEggsTotal", width = 3),
valueBoxOutput ("infoProdProteinTotal", width = 3),
fluidRow(column(12, div(style="display: inline-block;",tags$h3(("Production of animal products"))),
actionButton("help_production", label = icon("info-circle"),
style = "padding:10px; color: #000000; background-color: #ffffff00; border-color: #ffffff00"))),
checkboxGroupInput("prod_selAnimals", "Species",
choices = sort (c(Ruminants, Monogastrics)), inline = T, selected = c(Ruminants, Monogastrics)),
tabBox(
title = "Production of animal products",
# The id lets us use input$tabset1 on the server to find the current tab
side = "right",
selected = "Sankey",
width = NULL,
id = "tabset1",#, height = "250px",
tabPanel("Sankey",
fluidRow(column(6,
checkboxGroupInput("prod_selCommodities", "Product",
choices = c("Meat", "Milk", "Eggs"), inline = T, selected = c("Meat","Milk", "Eggs"))),
column (6,
radioButtons ("prod_selCommodityUnit", "Unit", inline = T, choices = c( "Protein", "Weight") ),
)),
checkboxGroupInput("prod_selSankeyNodes", "Nodes", inline= T,
choiceValues = c("Animal", "HerdType", "LPS", "Item"),
choiceNames = c("Species", "Herd", "Production system", "Commodity"),
selected = c("Animal", "Item")),
sankeyNetworkOutput ("SankeyNetwork3D_ProductionAll",width = "100%")
),
tabPanel("Bar",
fluidRow(column(6,
radioButtons("prod_selCommoditiesBar", "Product",
choices = c("Meat", "Milk", "Eggs", "Total protein"), inline = T, selected = c("Total protein"))),
),
plotlyOutput("ProductionBarChartAll") %>% withSpinner(color="#0A97D9")
)
),
fluidRow(column(12, div(style="display: inline-block;",tags$h3(("Animal Products Map"))),
actionButton("help_production_map", label = icon("info-circle"),
style = "padding:10px; color: #000000; background-color: #ffffff00; border-color: #ffffff00"))),
htmlOutput(  "HiHFrameProduction") %>% withSpinner(color="#0A97D9"),
),
########################################################################################################################################################################\
########################################################### REPORT ###############################################################################################
tabItem(
tabName = "tab_report",
h3(htmlOutput ("report_caption")),
"The GLEAM dashboard creates downloadable reports with figures, tables, and analysis of key data sets that where produced by GLEAM or that serverd as input to the model.
The country report report summarizes input data, as well as key figures and tables from the dashboard in one document. Reports are created on-the-fly, depending on the selected country or region
, this can take a minute or two.",
br(),
br(),
radioButtons('country_report_format', 'Choose format', c('PDF', 'HTML', 'Word'), selected= "HTML", inline = TRUE),
downloadButton("downloadCountryReport", label = "Create report",class = "download_this"),
" ",
br(),
br()
),
################################################################# DATA Section ##########################################################################
# tabItem(
#   h1("Data Access"),
#   tabName = "tab_data", h3("GLEAM data for the 2015 base year"),
#   "Here, you find the aggregated data, aggregated to countries and regions for the year 2015, available for browsing, filtering, sorting, and download. Depending on the size of the table
#               and your computer, the download might take a minute or two.",
#   br(),
#   hr(),
#
#   checkboxGroupInput(inputId = "Data_selAnimals",label = "Animals" ,choices= sort (unique (allData.dt[VarName == "Emissions"]$Animal)), selected = "Cattle", inline = T),
#   tags$hr(style="border-color: grey;"),
#   uiOutput ("Data_EmIntensityHerdType"),
#   uiOutput("DataEmIntensityLPS"),
#
#   uiOutput("DataEmIntensityCommodity"), checkboxInput("dataAccess_UnitProtein", label= "as protein", value = T),
#   uiOutput ("DataEmIntensity_emSource"),
#   checkboxGroupInput("Data_selNodes","Nodes", choiceValues =   c("Animal", "HerdType", "LPS" ), inline=T,
#                      choiceNames = c("Species", "Herd", "Production system" ), selected = "Animal"),
#   checkboxInput("Data_emIntensityBySource", "By sources", value= T ),
#
#   br(),
#   br(),
# ),
tabItem(
tabName = "tab_about",
box(width = NULL, status = "primary", solidHeader = FALSE,
title = tags$h2("About GLEAM", style = "font-size: 28px;  margin-top: 0px; margin-left: 20px"),
tags$div(includeHTML("html/aboutGLEAM.html"), style = "margin-top: 5px; margin-left: 20px;")
)
),
tabItem(
tabName = "tab_changes",
box(width = NULL, status = "primary", solidHeader = FALSE,
title = tags$h3("Change log", style = "font-size: 28px;  margin-top: 0px; margin-left: 20px;"),
tags$div(includeHTML("html/changeLog.html"), style = "margin-top: 5px; margin-left: 20px;")
)
),
tabItem(
tabName = "tab_Regions",
includeHTML("html/regions.htm")
)
),
div(class = "footer",
includeHTML("www/footer.html")
),
useShinyjs()
), # dashboard body
)
)
